%% Duals shank recording analysis pipeline. 
% Here we are just porting in a bunch of useful function from the original
% pipeline but making it exclusive for dual shank recordings. Want to do
% this for the sake of time and brevity.
%% Custom call of loading in dual shank data with active electrodes. 
% Here we need to make sure that the electrodes we map are correct based on
% the file that is being imported. 
addpath(genpath('Main'));
% addpath(genpath('chronux'));
% addpath(genpath('Kilosort'));
addpath(genpath('npy-matlab'));
addpath(genpath('spikes-master'));
intandsFlag = 1; %make LFPs
activeElectrodes = 1:64;
%chanMapFile = 'UCLA_chanmap_fixed.mat'; %UCLA Sharp
chanMapFile = 'UCLA_chanmap_64F2.mat';
if ~exist('pathname','var')
    pathname = uigetdir(pwd,'Input Directory');
end
ds_filename1 = intanPreprocessingDualShanks(pathname,chanMapFile,intandsFlag,activeElectrodes);
activeElectrodes = 65:128;
chanMapFile = 'UCLA_chanmap_fixed.mat'; %UCLA Sharp
%chanMapFile = 'UCLA_chanmap_64F2.mat';
ds_filename2 = intanPreprocessingDualShanks(pathname,chanMapFile,intandsFlag,activeElectrodes);
fpath = pathname;
savepath = fullfile(fpath,['loadme','.mat']);
save(savepath,'ds_filename1','ds_filename2','fpath');
clearvars -except ds_filename1 ds_filename2
%% Run Kilosort3 
% load only neccessary variables from memory mapped file
% Analysis of dual shank
data = matfile(ds_filename1);
fpath = data.fpath;
Kilosort264FTestcode

%Analysis of sharp shank
data = matfile(ds_filename2);
fpath = data.fpath;
Kilosort264SharpTestcode
%% New load me
[fname,fpath] = uigetfile();
savepath = fullfile(fpath,['loadme','.mat']);
ds_filename = fullfile(fpath,fname);
save(savepath,'ds_filename');
%% Parameters for behaviour
data = matfile(ds_filename1); % ds_filename comes from loadme.mat
% check if data directory matches where the file originated; if not we note
% the new directory path
parameters.experiment = 'cue'; % self - internally generated, cue - cue initiated
parameters.opto = 0; % 1 - opto ON , 0 - opto OFF
parameters.cool = 1; % No Cool 
parameters.windowBeforePull = 1.5; % in seconds
parameters.windowAfterPull = 1.5; % in seconds
parameters.windowBeforeCue = 1.5; % in seconds
parameters.windowAfterCue = 1.5; % in seconds
parameters.windowBeforeMI = 1.5; % in seconds 
parameters.windowAfterMI = 1.5; % in seconds 
parameters.Fs = 1000; % Eventual downsampled data
parameters.ts = 1/parameters.Fs;
parameters.IntanFs = data.targetedFs;
parameters.rows = 64;
parameters.cols = 1;

[Behaviour] = readLever(parameters,data.amplifierTime);
[IntanBehaviour] = readLeverIntan(parameters,data.amplifierTime,data.analogChannels(2,:),data.digitalChannels,Behaviour,1);
% Calculate ITI time for trials and reward/no reward sequence
temp1 = arrayfun(@(x) x.LFPtime(1), IntanBehaviour.cueHitTrace);
temp1 = vertcat(temp1,ones(1,IntanBehaviour.nCueHit)); %  write 1 for reward given
temp2 = arrayfun(@(x) x.LFPtime(1), IntanBehaviour.cueMissTrace);
temp2 = vertcat(temp2,zeros(1,IntanBehaviour.nCueMiss)); %  write 0 for no reward given
temp = [temp1,temp2];
[~,idx] = sort(temp(1,:)); %sort by occurance
IntanBehaviour.ITI = temp(:,idx);
%% Plot behaviour
figure
for i=1:IntanBehaviour.nCueHit
    plot(0:3000,smoothdata(IntanBehaviour.cueHitTrace(i).trace),'Color',[0 0 0 0.2],'LineWidth',1.5);
    hold on;
    try
        hitTrace(i,:) = smoothdata(IntanBehaviour.cueHitTrace(i).rawtrace);
    catch
        continue
    end
end
for n = 1:IntanBehaviour.nCueHit
    IntanBehaviour.AvgHitTrace(n,:) = IntanBehaviour.cueHitTrace(n).trace;
end
IntanBehaviour.AvgHitTrace = mean(IntanBehaviour.AvgHitTrace,1);
for n = 1:IntanBehaviour.nCueMiss
    IntanBehaviour.AvgMissTrace(n,:) = IntanBehaviour.cueMissTrace(n).trace;
end
IntanBehaviour.AvgMissTrace = mean(IntanBehaviour.AvgMissTrace,1);
IntanBehaviour.AvgHitTrace = mean(IntanBehaviour.AvgHitTrace,1);
%% LFP probe setup for 64F and analysis
% Since there are two probes we want to seperate everything into linear
% maps for CSD and depthwise LFP analysis and then we do filtering
data = matfile(ds_filename1);
load UCLA_chanMap_64F2
if ~exist('lfp','var'),lfp = data.amplifierData;end
%TODO check if the field orientation during insertion is reversed (ie. probe 1 is lateral to probe 2)
probe1 = lfp(s.sorted_probe_wiring(:,5)==1,:);
probe2 = lfp(s.sorted_probe_wiring(:,5)==2,:);
clear lfp
% LFP filter
set(0,'DefaultFigureWindowStyle','normal')
LFP.probe1= fastpreprocess_filtering(probe1,data.targetedFs);
% LFP.probe1 = bestLFP(LFP.probe1);
% LFP.probe1 = bandFilter(LFP.probe1,'depth'); % Extract LFPs based on 'depth' or 'single'
if ~isempty(probe2)
    LFP.probe2 = fastpreprocess_filtering(probe2,data.targetedFs);
end

data = matfile(ds_filename2);
load UCLA_chanmap_fixed.mat
if ~exist('lfp','var'),lfp = data.amplifierData;end
probe3 = lfp(s.sorted_probe_wiring(:,5)==1,:);
clear lfp
% LFP filter
set(0,'DefaultFigureWindowStyle','normal')
LFP.probe3= fastpreprocess_filtering(probe3,data.targetedFs);
%%% Calculate generalize phase for electrodes
LFP.probe1.genPhase = getGenPhaseProbe(LFP.probe1,IntanBehaviour); %lfp,IntanBehaviour
LFP.probe2.genPhase = getGenPhaseProbe(LFP.probe2,IntanBehaviour); %lfp,IntanBehaviour
LFP.probe3.genPhase = getGenPhaseProbe(LFP.probe3,IntanBehaviour); %lfp,IntanBehaviour


%%% Save data
% [fpath,name,exts] = fileparts(ds_filename);
% sessionName = [fpath,'/','LFP.mat'];
% % save(sessionName,"IntanBehaviour","fpath","parameters","-v7.3");
% save(sessionName,"IntanBehaviour","parameters","LFP","fpath","-v7.3");  

%%% PAs with zscoring
z_score = 0;
nIterrate = 1000;
plotFlag = 0;
[LFP.probe1.PA] = getPAProbe(LFP.probe1.genPhase,IntanBehaviour,z_score,nIterrate,plotFlag,parameters);
[LFP.probe2.PA] = getPAProbe(LFP.probe2.genPhase,IntanBehaviour,z_score,nIterrate,plotFlag,parameters);
[LFP.probe3.PA] = getPAProbe(LFP.probe3.genPhase,IntanBehaviour,z_score,nIterrate,plotFlag,parameters);

%%% Save data cos it takes a while
[fpath,name,exts] = fileparts(ds_filename1);
sessionName = [fpath,'/','LFP.mat'];
% save(sessionName,"IntanBehaviour","fpath","parameters","-v7.3");
save(sessionName,"IntanBehaviour","parameters","LFP","fpath","-v7.3"); %,"betaWaves","thetaWaves","gammaWaves",
%% Spikes analysis
% For spike analysis we can built the function call to call the neccessary
% function twice for each probe. It will make like a lot easier. 
if exist('parameters','var')
    IntanBehaviour.parameters = parameters;
end
chanMap =  'chanMap64F2';
%load chanMap64Sharp
M2Spikes = getSpikeStruct(ds_filename1, chanMap,IntanBehaviour);
%%%
if exist('parameters','var')
    IntanBehaviour.parameters = parameters;
end
chanMap =  'chanMap64Sharp';
M1Spikes = getSpikeStruct(ds_filename2, chanMap,IntanBehaviour);

%% Trajectory Analysis of two regions (ONGOING)
neuralTrajAnalysis(M1Spikes,[],IntanBehaviour);

%% LOCAL FUNCTION CALL

% Function call for getting spike structure
function Spikes = getSpikeStruct(ds_filename, chanMap,IntanBehaviour)
[fpath,name,exts] = fileparts(ds_filename);

fprintf('Getting spikes...')

data = matfile(ds_filename);
path = [fpath,'/kilosort3/'];
mergename = 'merged';
Kilosort3AutoMergeTester
path = [fpath,'/kilosort3/' mergename];
%%% Spike preprocessing (includes merging (optional) and channel info
%%% return)
% Read in kilosort data for matlab analysis
SpikeClusters = readNPY(fullfile(path, 'spike_clusters.npy'));
SpikeSamples = readNPY(fullfile(path, 'spike_times.npy'));
SpikeChannel = readNPY(fullfile(path,'channel_positions.npy'));
Spikes.SpikeClusters = SpikeClusters;
Spikes.SpikeSamples = SpikeSamples;
Spikes = clusterSort(Spikes);
Spikes = ISI(Spikes,0.01,data.Fs,0); %Spikes, Interval, Fs
% Calculate Depth profile
%load chanMap64F2
%load chanMap64Sharp
load(chanMap)
if strcmp(chanMap,'chanMap64F2')
[spikeAmps, spikeDepths, templateDepths, tempAmps, tempsUnW, templateDuration, waveforms, max_site] =...
    spikeTemplatePosition(data.fpath,ycoords,'invert'); % 'invert'
else
    [spikeAmps, spikeDepths, templateDepths, tempAmps, tempsUnW, templateDuration, waveforms, max_site] =...
    spikeTemplatePosition(data.fpath,ycoords,[]); % 'invert'
end
for i = 1:length(tempAmps)
    Spikes.Clusters(i).spikeDepth = templateDepths(i);
    Spikes.Clusters(i).channelDepth = max_site(i);
    Spikes.Clusters(i).spikeAmplitude = tempAmps(i);
    Spikes.Clusters(i).waveforms = waveforms(i,:);
    Spikes.Clusters(i).spikeDuration = templateDuration(i)/data.Fs*1000;
end
%%% delete empty spikes
temp = arrayfun(@(x) isempty(x.cluster), Spikes.Clusters);
Spikes.Clusters(temp) = [];
fprintf('done\n')
%% Calculate trial PSTH for lever
fprintf('Cleaning spikes...')
Spikes = leverPSTH(Spikes,IntanBehaviour);
%%% save spike output data to load into gui
savepath = fullfile(path,['spks4sorting','.mat']);
path = [fpath,'/kilosort3/' mergename];
save(savepath,'Spikes','-v7.3')
%ManualSpikeCurateGUI
%%% Basic spike analysis
% z-score spike rates
if exist('parameters','var')
    IntanBehaviour.parameters = parameters;
end
Spikes = rejectSpikes(Spikes,0.25,0.25,IntanBehaviour.parameters); % Reject spikes here for further analysis
[Spikes] = sortSpkLever(Spikes,IntanBehaviour);
if exist('goodSpkComponents','var')
    Spikes.goodSpkComponents = unique(goodSpkComponents);
else
    Spikes.goodSpkComponents = 1:length(Spikes.Clusters);
    disp('Manual curation skipped...')
end
fprintf('done\n')
[fpath,name,exts] = fileparts(ds_filename);
sessionName = [fpath,'/','Spikes.mat'];
% save(sessionName,"IntanBehaviour","fpath","parameters","-v7.3");
save(sessionName,"Spikes","IntanBehaviour","fpath","-v7.3"); %,"betaWaves","thetaWaves","gammaWaves",
disp('Saved!')
% %% Make it layer specific TODO:Gamma GED/Spike coherence
% Spikes = layerspikeAnalysis(Spikes,IntanBehaviour,LFP);
%% Neural Trajectories
Spikes = makeSpikeGPFA(Spikes);
Spikes.GPFA.HitMiss.dat = [Spikes.GPFA.hit.dat,Spikes.GPFA.miss.dat];
for n = 1:IntanBehaviour.nCueHit%+1:length(Spikes.GPFA.BaselineOpto.dat) %fix trials
    Spikes.GPFA.HitMiss.dat(n).trialId = n;
end
Spikes.GPFA.MIHitFA.dat = [Spikes.GPFA.MIHit.dat,Spikes.GPFA.MIFA.dat];
for n = length(IntanBehaviour.MIHitTrace)+1:length(Spikes.GPFA.MIHitFA.dat) %fix trials
    Spikes.GPFA.MIHitFA.dat(n).trialId = n;
end
%% Neural Trajectory
addpath(genpath('C:\Users\khan332\Documents\GitHub\NeuralTraj'));
addpath(genpath('mat_results'));
if exist('mat_results','dir'),rmdir('mat_results','s'),end
[Spikes.GPFA.resultHit,Spikes.GPFA.seqTrainHit] = gpfaAnalysis(Spikes.GPFA.hit.dat,1); %Run index
[Spikes.GPFA.resultMiss,Spikes.GPFA.seqTrainMiss] = gpfaAnalysis(Spikes.GPFA.miss.dat,2); %Run index
[Spikes.GPFA.resultMIHit,Spikes.GPFA.seqTrainMIHit] = gpfaAnalysis(Spikes.GPFA.MIHit.dat,3); %Run index
[Spikes.GPFA.resultMIFA,Spikes.GPFA.seqTrainMIFA] = gpfaAnalysis(Spikes.GPFA.MIFA.dat,4); %Run index
[Spikes.GPFA.resultHitMiss,Spikes.GPFA.seqTrainHitMiss] = gpfaAnalysis(Spikes.GPFA.HitMiss.dat,5); %Run index
[Spikes.GPFA.resultMIHitFA,Spikes.GPFA.seqTrainMIHitFA] = gpfaAnalysis(Spikes.GPFA.MIHitFA.dat,6); %Run index
close all
end