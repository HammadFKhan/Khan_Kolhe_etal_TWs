%% Prep data for VarMean analysis
%fpath = 'F:\LeverTask\Ephys\Analysis\spksPooled';
%fpath = 'F:\LeverTask\Ephys\Analysis\spksPooledwFA';
%fpath = 'F:\LeverTask\Ephys\Analysis\M2Spikes';
fpath = 'Y:\Hammad\Ephys\LeverTask\Data_for_Figures\M2SpikeData';
file = dir(fullfile(fpath,'*.mat'));

%%%
M1Data = struct();
M2Datahit = struct();
M2Datamiss = struct();
M2DataMIFA = struct();
count1 = 1;count2 = 1;count3 = 1;

for fileNum = 1:length(file)
    load(fullfile(file(fileNum).folder,file(fileNum).name))
    for n = 1:length(Spikes.PSTH.hit.spks)
        M2Datahit(count1).spikes = logical(Spikes.PSTH.hit.spks{n});
        count1 = count1+1;
    end
    for n = 1:length(Spikes.PSTH.miss.spks)
        M2Datamiss(count2).spikes = logical(Spikes.PSTH.miss.spks{n});
        count2 = count2+1;
    end
    for n = 1:length(Spikes.PSTH.MIFA.spks)
        M2DataMIFA(count3).spikes = logical(Spikes.PSTH.MIFA.spks{n});
        count3 = count3+1;
    end
end
%% Calculate Neural variability via mean-matched FF
% See: Churchland MM et al. (2010)  Stimulus onset quenches neural variability: a widespread cortical phenomenon. Nat. Neurosci.

% DEFINE Data type here
% Call FF function and calculate
M1Data = M2Datahit;
ResultsHit = calcNeuralVariance(M1Data);
M1Data = M2Datamiss;
Resultsmiss = calcNeuralVariance(M1Data);
M1Data = M2DataMIFA;
ResultsFA = calcNeuralVariance(M1Data);
%% Check Fakerized data 
% This is critical!! Here we fakerize our actual data to check if the effect
% is real. 
% The result is 'fake' data whose basic properties (e.g. mean firing rate) are identical to the
% original data, but where every trial has the same underlying rate, and the only across-trial
% variability is due to spiking statistics. 

% The function works by redistributing the spikes in a given ms across all trials for that
% neuron/condition.  Thus, any within-trial spiking autocorrelation is removed.  The result
% is poisson spiking statistics (within 1 ms resolution) with no change in the mean rate.

%
% Using default Poisson statistics, the Fano factor for 'Fakerized' data should be very close to 1. 
% It will be slightly less due to the 1 ms refractory period imposed by the data format, and will 
% drop slightly if the firing rate rises.  However, when matching spike-count distributions 
% (using VarVsMean the latter effect should dissapear.  If the Fano Factor produced by VarVsMean does 
% NOT remain constant (probably near 0.95)when using Fakerized data (and when matching dists) then 
% there must be an artifact in the analysis. 
% I statistically plot this out in the next part :)

M1Data = M2Datahit;
FakResulthit = calcFakNeuralVariace(M1Data);
M1Data = M2Datamiss;
FakResultmiss = calcFakNeuralVariace(M1Data);
M1Data = M2DataMIFA;
FakResultFA = calcFakNeuralVariace(M1Data);
%% Calc FF stats and make structure for further analysis
Stats.Hit = calcStats(ResultsHit);
Stats.Miss = calcStats(Resultsmiss);
Stats.FA = calcStats(ResultsFA);
%%
Stats.FakHit = calcStats(FakResulthit);
Stats.FakMiss = calcStats(FakResultmiss);
Stats.FakFA = calcStats(FakResultFA);
%% Plot it out
colors = [0 0.4470 0.7410;0.75 0.75 0.75;190/255 30/255 45/255];

dat1 = Stats.Hit.FFdrop;
dat2 = Stats.Miss.FFdrop;
dat3 = Stats.FA.FFdrop;

temp = nan(max([length(dat1) length(dat2) length(dat3)]),3);
temp(1:length(dat1),1) = dat1;
temp(1:length(dat2),2) = dat2;
temp(1:length(dat3),3) = dat3;
figure(1)
clf
subplot(121),violinplot(temp,[],'ShowData',true,'ShowWhiskers',false,'ShowBox',false,'MarkerSize',5,'ViolinColor',colors);
set(gca,'tickdir','out','fontsize',16),box off,ylim([-1.5 1.5])

dat1 = Stats.Hit.FFstim;
dat2 = Stats.Miss.FFstim;
dat3 = Stats.FA.FFstim;

temp = nan(max([length(dat1) length(dat2) length(dat3)]),3);
temp(1:length(dat1),1) = dat1;
temp(1:length(dat2),2) = dat2;
temp(1:length(dat3),3) = dat3;
figure(1)
subplot(122),violinplot(temp,[],'ShowData',true,'ShowWhiskers',false,'ShowBox',false,'MarkerSize',5,'ViolinColor',colors);
set(gca,'tickdir','out','fontsize',16),box off,ylim([1 3])
%% Do stats on baseline
ranksum(Stats.FA.FFdrop,Stats.FakFA.FFdrop)
ranksum(Stats.FA.FFdrop,Stats.FakFA.FFdrop)
ranksum(Stats.FA.FFdrop,Stats.FakFA.FFdrop)
%% Plot Fak
dat1 = Stats.FakHit.FFdrop;
dat2 = Stats.FakMiss.FFdrop;
dat3 = Stats.FakFA.FFdrop;
temp = nan(max([length(dat1) length(dat2) length(dat3)]),3);
temp(1:length(dat1),1) = dat1;
temp(1:length(dat2),2) = dat2;
temp(1:length(dat3),3) = dat3;
figure
subplot(121),violinplot(temp,[],'ShowData',true,'ShowWhiskers',false,'ShowBox',false,'MarkerSize',5,'ViolinColor' ,colors)
set(gca,'tickdir','out','fontsize',16),box off,ylim([-1 1.5])

dat1 = Stats.FakHit.FFstim;
dat2 = Stats.FakMiss.FFstim;
dat3 = Stats.FakFA.FFstim;
temp = nan(max([length(dat1) length(dat2) length(dat3)]),3);
temp(1:length(dat1),1) = dat1;
temp(1:length(dat2),2) = dat2;
temp(1:length(dat3),3) = dat3;
subplot(122),violinplot(temp,[],'ShowData',true,'ShowWhiskers',fale,'ShowBox',false,'MarkerSize',5,'ViolinColor',colors)
set(gca,'tickdir','out','fontsize',16),box off,ylim([0 2])
%%
scatterParams.axLim = 'auto'; 
scatterParams.axLen = 6;
scatterParams.plotInExistingFig = 0;
scatterParams.showFanoAll = 0;
scatterParams.mSize = 10;
plotScatter(Result, -100,scatterParams);
text(2.5, 7, '100 ms before target', 'hori', 'center');
plotScatter(Result, 5,scatterParams);
text(2.5, 7, '0 ms before target', 'hori', 'center');
plotScatter(Result, 300, scatterParams);
text(2.5, 7, '100 ms after target', 'hori', 'center');
plotScatter(Result, 600, scatterParams);
text(2.5, 7, '300 ms after target', 'hori', 'center');


%% Plot as mean spike count to variance
figure,
for n = 1:40
    scatter(Result.scatterData(25+n).mn,Result.scatterData(25+n).var,'k','filled'),hold on    
end
for n = 1:40
    scatter(MissResult.scatterData(25+n).mn,MissResult.scatterData(25+n).var,'MarkerEdgeColor','none',...
              'MarkerFaceColor',[.5 .5 .5],...
              'LineWidth',1.5),hold on   
end
line(0:30,0:30,'LineWidth',2,'Color',[ 0 0 0 ])
xlim([0 5])
ylim([0 5])
set(gca,'TickDir','out'),set(gca,'fontsize',12),box off
xlabel('Mean spike rate')
ylabel('Spike variance')
%% Bin data for analysis
[mntotal,valm] = arrayfun(@(x) discretize(x.mn,8),Result.scatterData,'UniformOutput',false);
[vartotal,valvar] = arrayfun(@(x) discretize(x.var,8),Result.scatterData,'UniformOutput',false);
for n = 1:74
    for nn = 1:8
        temp = Result.scatterData(n).mn(mntotal{n}==nn);
        mnSpk(nn,n) = nanmean(temp(temp>0));
        varSpk(nn,n) = nanmean(Result.scatterData(n).var(vartotal{n}==nn));
    end
end
mnSpk = nanmean(mnSpk(:,28:48),2);
varSpk = nanmean(varSpk(:,28:48),2);
varSpk = inpaint_nans(varSpk);
%% 
figure,plot(mnSpk,varSpk)
%%
ScatterMovie(Result);
%%
pad = [];
for n = 20
    Show_Spikes(M1Data(n).spikes);hold on    
end
%% FUNCTIONS
% FFcalculations
function Result = calcNeuralVariance(M1Data)
% Remove empties
temp = find(arrayfun(@(x) isempty(x.spikes), M1Data)==1);
M1Data(temp) = [];
addpath(genpath('C:\Users\khan332\Documents\GitHub\Variance_toolbox'));
% times = 100:15:1200;  % from 200 ms before target onset until 450 ms after.
% fanoParams.alignTime = 500;    % this time will become zero time
% fanoParams.boxWidth = 100;     % 50 ms sliding window.
times = 1000:15:2500;  % from 200 ms before target onset until 450 ms after.
fanoParams.alignTime = 1500;    % this time will become zero time
fanoParams.boxWidth = 100;     % 50 ms sliding window.
%Result = VarVsMean(M1Data, times, fanoParams);
Result = MeanFano(M1Data, times, fanoParams);
plotFanoParams.plotRawF = 1;
plotFano(Result,plotFanoParams);
end

function FakResult = calcFakNeuralVariace(M1Data)
times = 100:15:1200;  % from 200 ms before target onset until 450 ms after.
fanoParams.alignTime = 500;    % this time will become zero time
fanoParams.boxWidth = 200;     % 50 ms sliding window.

% times = 1000:15:2500;  % from 200 ms before target onset until 450 ms after.
% fanoParams.alignTime = 1500;    % this time will become zero time
% fanoParams.boxWidth = 100;     % 50 ms sliding window.
FakResult = VarVsMean(Fakerize(M1Data,'poisson'), times, fanoParams);  % takes a while
%FakResult = MeanFano(Fakerize(PMDdata2,'gamma'), times, fanoParams);
plotFanoParams.plotRawF = 1;
plotFano(FakResult, plotFanoParams);
end


function Stats = calcStats(Results)
Var = arrayfun(@(x) horzcat(x.var), Results.scatterData, 'UniformOutput', false);
Var = horzcat(Var{:});
MM = arrayfun(@(x) horzcat(x.mn), Results.scatterData, 'UniformOutput', false);
MM = horzcat(MM{:});
Stats.FF = Var./MM;
Stats.FFdrop = nanmean(Stats.FF(:,1:34),2)-nanmean(Stats.FF(:,35:70),2);
Stats.FFstim = nanmean(Stats.FF(:,35:70),2);
end